// Functions

def ConcatState(Stage,State) {
    SUMMARY_STATE="${SUMMARY_STATE}  STAGE: ${Stage} - ${State}\n"
}

def mailNotification() {
    step([$class: 'Mailer',
          notifyEveryUnstableBuild: true,
          recipients: "root@localhost",
          sendToIndividuals: true])
}

def clearContentUnix() {
    cleanWs()
}

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}

def DiscordSetHook() {
    if ( currentBuild.result == "SUCCESS" ) {
        return "diskord-jenkins-report"
    } else {
        return "diskord-jenkins-report"
    }
}

def print_info_header(message) {
    echo "#---------------------------------------"
    echo "#---> ${message}"
    echo "#---------------------------------------"
}

def DockerRunner(cmd, logfile){
    cmd_docker = "sudo docker exec --tty -u \$(id -u) ${BASE_CONTAINER_NAME} bash -c "
    cmd_prefix = "\' cd ${CONTAINER_PROJECT_ROOT} && "
    cmd_postfix = " 2>&1 | tee ${CONTAINER_PROJECT_ROOT}/artifacts/${logfile}; exit \${PIPESTATUS[0]}\'"
    sh "${cmd_docker} ${cmd_prefix} ${cmd} ${cmd_postfix}"
}


pipeline    {
    agent { node { label "${BUILD_HOST}"} }
    environment {
        LAST_STAGE_NAME = ""
        SUMMARY_STATE="PROJECT: ${currentBuild.fullDisplayName}\n.   AUTOMATION: ${CI_BRANCH}\n.   DEB FROM: ${JOB_NUMBER}\n.  COMMENT: ${BUILD_COMMENT}\n\n"
        BASE_IMAGE = "harbor.localnet/yiot/raspios-buster-devel"
        BASE_CONTAINER_NAME = "${env.JOB_NAME}-${env.BUILD_NUMBER}"
        CONTAINER_PROJECT_ROOT = "/home/build"
        BUILD_OPTS = " "
    }

    stages {
        stage('Grab SCM') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    clearContentUnix()
                    checkout scm
                    sh "mkdir -p artifacts"
                    sh "mkdir -p build"                    
                    ConcatState(LAST_STAGE_NAME,"OK")
                }
            }
        }

        stage('Downloading image') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    print_info_header("Downloading image")   
                    sh "cd build ; wget -c ${env.RPI_IMAGE_URL}  2>&1 | tee -a ${workspace}/artifacts/download-image.log; exit \${PIPESTATUS[0]}"
//                    sh "cd build && wget -c ${env.RPI_IMAGE_URL}"
                    ConcatState(LAST_STAGE_NAME,"OK")                    
                }
            }
        }
        
        stage('Get DEB pkg') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    print_info_header("Downloading DEB pkg")   
                    copyArtifacts fingerprintArtifacts: true, projectName: 'build-rpi-deb', selector: specific("${env.JOB_NUMBER}"), target: 'build'
                    ConcatState(LAST_STAGE_NAME,"OK")                    
                }
            }
        }        
        
        stage('Rebuild image') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    print_info_header("Unzip image")   
                    sh "cd build ; unzip *.zip  2>&1 | tee -a ${workspace}/artifacts/rebuild-image.log; exit \${PIPESTATUS[0]}"
                    print_info_header("Installing pkgs")   
                    sh "DEB_PKG=\$(ls build/artifacts/*.deb|grep -v dbgsym); RPI_IMG=\$(ls build/*.img); utils/rpi-imager.sh install -i \${RPI_IMG} -p \${DEB_PKG}  2>&1 | tee -a ${workspace}/artifacts/rebuild-image.log; exit \${PIPESTATUS[0]}"
                    ConcatState(LAST_STAGE_NAME,"OK")                    
                }
            }
        }        
        
        stage('Upload to cdn') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    print_info_header("Upload to cdn")   
                    sh "RPI_IMG=\$(ls build/*.img); utils/push-artifacts.sh  \${RPI_IMG} images/${env.BUILD_NUMBER}/  2>&1 | tee -a ${workspace}/artifacts/upload-image.log; exit \${PIPESTATUS[0]}"
                    ConcatState(LAST_STAGE_NAME,"OK")                    
                }
            }
        }                

        stage('Archive artifacts') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    print_info_header("${LAST_STAGE_NAME}")
                    writeFile file: 'artifacts/summary.log', text: "${SUMMARY_STATE}"
                    archiveArtifacts('artifacts/**/*')
                    ConcatState(LAST_STAGE_NAME,"OK")                    
                }
            }
        }

    }

////
//// Post procedure
////

    post {
        always {
            print_info_header("Report")
            script {
                ConcatState("","\n  URL: ftp://cdn.yiot-dev.io/pub/images/${BUILD_NUMBER}/")
                // Send message to Discord
                if ( DISKORD_NOTIFY == "true" ) {
                    try {
                        withCredentials([string(credentialsId: DiscordSetHook(), variable: 'WEBHOOK')]) {
                            discordSend description: SUMMARY_STATE,
                                    footer: 'Job state: ' + currentBuild.currentResult,
                                    link: env.BUILD_URL,
                                    result: currentBuild.currentResult,
                                    title: JOB_NAME,
                                    webhookURL: WEBHOOK
                        }
                    } catch(any) { }
                }
            }
            echo "#---- SUMMARY RESULTS OF TESTS ---------"
            echo "# ${SUMMARY_STATE}"
            echo "#---------------------------------------"
        }
        success {
            echo 'POST SUCCESS'
        }
        unstable {
            echo 'POST UNSTABLE'
        }
        failure {
            echo 'POST FAILURE'
            ConcatState(LAST_STAGE_NAME,"FAILURE")
        }
        changed {
            echo 'POST CHANGED'
        }
    }
}
