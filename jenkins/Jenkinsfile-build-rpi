// Functions

def ConcatState(Stage,State) {
    SUMMARY_STATE="${SUMMARY_STATE}  STAGE: ${Stage} - ${State}\n"
}

def mailNotification() {
    step([$class: 'Mailer',
          notifyEveryUnstableBuild: true,
          recipients: "root@localhost",
          sendToIndividuals: true])
}

def clearContentUnix() {
    cleanWs()
}

def archiveArtifacts(pattern) {
    step([$class: 'ArtifactArchiver', artifacts: pattern, fingerprint: true, onlyIfSuccessful: false])
}

def DiscordSetHook() {
    if ( currentBuild.result == "SUCCESS" ) {
        return "diskord-jenkins-report"
    } else {
        return "diskord-jenkins-report"
    }
}

def print_info_header(message) {
    echo "#---------------------------------------"
    echo "#---> ${message}"
    echo "#---------------------------------------"
}

def DockerRunner(cmd, logfile){
    cmd_docker = "sudo docker exec -u \$(id -u) ${BASE_CONTAINER_NAME} bash -c "
    cmd_prefix = "\'. ~/.bashrc && cd ${CONTAINER_PROJECT_ROOT} && "
    cmd_postfix = " 2>&1 | tee ${CONTAINER_PROJECT_ROOT}/artifacts/${logfile}; exit \${PIPESTATUS[0]}\'"
    sh "${cmd_docker} ${cmd_prefix} ${cmd} ${cmd_postfix}"
}


pipeline    {
    agent { node { label "${BUILD_HOST}"} }
    environment {
        LAST_STAGE_NAME = ""
        SUMMARY_STATE="PROJECT: ${currentBuild.fullDisplayName}\n.   AUTOMATION: ${CI_BRANCH}\n.   PROJECT: ${YIOT_BRANCH}\n. COMMENT: ${BUILD_COMMENT}\n\n"
        BASE_IMAGE = "harbor.localnet/yiot/raspios-buster-devel"
        BASE_CONTAINER_NAME = "${env.JOB_NAME}-${env.BUILD_NUMBER}"
        CONTAINER_PROJECT_ROOT = "/home/build"
        BUILD_OPTS = " "
    }

    stages {
        stage('Grab SCM') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    clearContentUnix()
                    checkout scm
                    sh "mkdir -p artifacts"
                    checkout([$class: 'GitSCM',
                                      branches: [[name: '${YIOT_BRANCH}']],
                                      doGenerateSubmoduleConfigurations: false,
                                      extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false],[$class: 'RelativeTargetDirectory', relativeTargetDir: 'yiot']],
                                      submoduleCfg: [],
                                      userRemoteConfigs: [[credentialsId: 'yiot-bot', url: 'https://github.com/YIoT-team/YIoT.git']]])
                    ConcatState(LAST_STAGE_NAME,"OK")
                }
            }
        }

        stage('Prepare container') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"

                    // Pull image
                    print_info_header("Pull image for Base container")
                    sh "sudo docker pull ${BASE_IMAGE}"

                    // Run container
                    print_info_header("Run Base container")
                    sh "sudo docker run -d --rm --cap-add SYS_PTRACE --name ${BASE_CONTAINER_NAME} \
                     -e LD_LIBRARY_PATH=/usr/lib \
                     -e BUILD_UID=\$(id -u) \
                     -e BUILD_GID=\$(id -g) \
                     -e BUILD_NUMBER=${BUILD_NUMBER} \
                     -v ${workspace}/:${CONTAINER_PROJECT_ROOT} -v /etc/hosts:/etc/hosts ${BASE_IMAGE}"

                    print_info_header("Waiting creating user Jenkins in container")
                    sh "sudo docker exec ${BASE_CONTAINER_NAME} bash -c \'/usr/local/bin/started.sh\'"
                    ConcatState(LAST_STAGE_NAME,"OK")
                }
            }
        }

//        stage('Static analise CPPCHECK') {
//            steps {
//                script {
//                    LAST_STAGE_NAME="${STAGE_NAME}"
//                    if ( STATIC_ANALISE == "true" ) {
//                        print_info_header("${LAST_STAGE_NAME}")
//                        try {
//                            DockerRunner("iot-qt/scripts/analise/cpp-check.sh ${CONTAINER_PROJECT_ROOT}/virgil-messenger-qt", "cppcheck.log")
//                        }
//                        catch(any) {
//                        unstable()
//                        ConcatState(LAST_STAGE_NAME,"UNSTABLE")
//                        return
//                        }
//                        ConcatState(LAST_STAGE_NAME,"OK")
//                    } else  {
//                        ConcatState(LAST_STAGE_NAME,"SKIPPED")
//                    }
//                }
//            }
//        }


        stage('Building Linux') {
            steps {
                script {
                    LAST_STAGE_NAME="${STAGE_NAME}"
                    
                    print_info_header("Build linux binary")   
                    DockerRunner("jenkins/build-tool.sh -t linux", "build-linux.log")
                    DockerRunner("jenkins/pkg/prep-pkg.sh yiot", "build-linux.log")

                    ConcatState(LAST_STAGE_NAME,"OK")                    
                }
            }
        }

//        stage('Archive artifacts') {
//            steps {
//                script {
//                    LAST_STAGE_NAME="${STAGE_NAME}"
//                    print_info_header("${LAST_STAGE_NAME}")
//                    writeFile file: 'artifacts/summary.log', text: "${SUMMARY_STATE}"
//                    archiveArtifacts('artifacts/**/*')
//                    ConcatState(LAST_STAGE_NAME,"OK")                    
//                }
//            }
//        }

    }

////
//// Post procedure
////

    post {
        always {
            print_info_header("Cleanup")
            script {
                sh "sudo docker exec -u \$(id -u) ${env.BASE_CONTAINER_NAME} bash -c \'sudo chown -R \$(id -u).\$(id -g) ${env.CONTAINER_PROJECT_ROOT}\' || true"
                sh "sudo docker rm -f ${env.BASE_CONTAINER_NAME} || true"
                sh "sudo docker volume prune -f || true"
            }

            print_info_header("Report")
            script {
                // Send message to Discord
                if ( DISKORD_NOTIFY == "true" ) {
                    try {
                        withCredentials([string(credentialsId: DiscordSetHook(), variable: 'WEBHOOK')]) {
                            discordSend description: SUMMARY_STATE,
                                    footer: 'Job state: ' + currentBuild.currentResult,
                                    link: env.BUILD_URL,
                                    result: currentBuild.currentResult,
                                    title: JOB_NAME,
                                    webhookURL: WEBHOOK
                        }
                    } catch(any) { }
                }
            }
            echo "#---- SUMMARY RESULTS OF TESTS ---------"
            echo "# ${SUMMARY_STATE}"
            echo "#---------------------------------------"
        }
        success {
            echo 'POST SUCCESS'
        }
        unstable {
            echo 'POST UNSTABLE'
        }
        failure {
            echo 'POST FAILURE'
            ConcatState(LAST_STAGE_NAME,"FAILURE")
        }
        changed {
            echo 'POST CHANGED'
        }
    }
}
